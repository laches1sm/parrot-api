// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// parrot HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/bdna/the_parrot_api/design

package server

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/http"
)

// EncodeAddParrotResponse returns an encoder for responses returned by the
// parrot add-parrot endpoint.
func EncodeAddParrotResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(int)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeAddParrotRequest returns a decoder for requests sent to the parrot
// add-parrot endpoint.
func DecodeAddParrotRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			name   string
			breed  string
			colour string

			params = mux.Vars(r)
		)
		name = params["name"]
		breed = params["breed"]
		colour = params["colour"]
		payload := NewAddParrotPayload(name, breed, colour)

		return payload, nil
	}
}
